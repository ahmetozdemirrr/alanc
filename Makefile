PROGRAM = alanc
CC = gcc
FLEX = flex
BISON = bison

BUILD_DIR = build
SRC_DIR = src

# --- Compiler & Linker Flags ---
CFLAGS = -g -Wall -Wextra -std=gnu11
CPPFLAGS = -I$(SRC_DIR)/common/include -I$(SRC_DIR)/frontend/include -I$(BUILD_DIR)/frontend/src/parser
LDFLAGS =
LDLIBS = -lfl -lm

# --- Automatic File Detection ---
# Finds all .c, .y, and .l files under the SRC_DIR.
C_SOURCES = $(shell find $(SRC_DIR) -name '*.c')
Y_SOURCES = $(shell find $(SRC_DIR) -name '*.y')
L_SOURCES = $(shell find $(SRC_DIR) -name '*.l')

# --- Output File Definitions ---
# Convert source file paths to object file paths under the build directory.
OBJECTS = $(patsubst $(SRC_DIR)/%.c, $(BUILD_DIR)/%.o, $(C_SOURCES))

# Define paths for files generated by Flex and Bison.
PARSER_C = $(patsubst $(SRC_DIR)/%.y, $(BUILD_DIR)/%.tab.c, $(Y_SOURCES))
PARSER_H = $(patsubst $(SRC_DIR)/%.y, $(BUILD_DIR)/%.tab.h, $(Y_SOURCES))
LEXER_C  = $(patsubst $(SRC_DIR)/%.l, $(BUILD_DIR)/%.yy.c, $(L_SOURCES))

# Add the objects for the generated .c files to the main object list.
OBJECTS += $(patsubst $(SRC_DIR)/%.y, $(BUILD_DIR)/%.tab.o, $(Y_SOURCES))
OBJECTS += $(patsubst $(SRC_DIR)/%.l, $(BUILD_DIR)/%.yy.o, $(L_SOURCES))

# The final executable path.
TARGET = $(PROGRAM)

# --- Makefile Recipes ---

.PHONY: all clean run test memcheck

# Default target: builds the entire project.
all: $(TARGET)

# Rule to link the final executable from all object files.
$(TARGET): $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $^ $(LDLIBS)

# Rule to generate parser (.tab.c) and header (.tab.h) from a .y file.
$(BUILD_DIR)/%.tab.c $(BUILD_DIR)/%.tab.h: $(SRC_DIR)/%.y
	@mkdir -p $(dir $@)
	$(BISON) -d --warnings=all -o $@ $<

# Rule to generate scanner (.yy.c) from a .l file.
# This rule depends on the parser's header file for token definitions.
$(BUILD_DIR)/%.yy.c: $(SRC_DIR)/%.l $(PARSER_H)
	@mkdir -p $(dir $@)
	$(FLEX) -o $@ $<

# Rule to compile user-written .c source files into .o object files.
# $< is the first prerequisite (the .c file).
# $@ is the target (the .o file).
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Rule to compile the Bison-generated .tab.c file.
$(BUILD_DIR)/%.tab.o: $(BUILD_DIR)/%.tab.c
	@mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Rule to compile the Flex-generated .yy.c file.
$(BUILD_DIR)/%.yy.o: $(BUILD_DIR)/%.yy.c
	@mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Rule to clean the project: removes the build directory and the executable.
clean:
	rm -rf $(BUILD_DIR) $(TARGET)

# Rule to run the compiler with a test file.
test: all
	./$(TARGET) tests/test.alan

# Rule to run the compiler without arguments.
run: all
	./$(TARGET)

# Rule to run a memory check with Valgrind.
memcheck: all
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET) tests/test.
